import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../core/logging/app_logger.dart';
import '../../../../shared/base/base_view_model.dart';
import '../../../auth/domain/entities/user_entity.dart';
import '../../../auth/presentation/providers/auth_providers.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ onboarding/welcome
class OnboardingState {
  const OnboardingState({
    this.isSigningInAsGuest = false,
    this.showAuthenticatedView = false,
  });

  final bool isSigningInAsGuest;
  final bool showAuthenticatedView;

  OnboardingState copyWith({
    bool? isSigningInAsGuest,
    bool? showAuthenticatedView,
  }) {
    return OnboardingState(
      isSigningInAsGuest: isSigningInAsGuest ?? this.isSigningInAsGuest,
      showAuthenticatedView:
          showAuthenticatedView ?? this.showAuthenticatedView,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
  bool get isProcessing => isSigningInAsGuest;
}

/// View Model –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/onboarding
class OnboardingViewModel extends BaseViewModelWithState<OnboardingState> {
  OnboardingViewModel(this._ref) {
    _init();
  }

  final Ref _ref;

  @override
  void dispose() {
    AppLogger.debug('OnboardingViewModel disposed');
    super.dispose();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è view model
  void _init() {
    AppLogger.debug('OnboardingViewModel initialized');
    setState(const OnboardingState());

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    _ref.listen(authNotifierProvider, (previous, next) {
      next.whenOrNull(
        data: (authState) {
          _onAuthStateChanged(authState);
        },
      );
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    _checkInitialAuthState();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void _checkInitialAuthState() {
    final authState = _ref.read(authNotifierProvider);
    authState.whenOrNull(
      data: (state) {
        final isAuthenticated = state.isAuthenticated;
        setState(state.copyWith(showAuthenticatedView: isAuthenticated));
      },
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void _onAuthStateChanged(authState) {
    AppLogger.debug('Auth state changed in OnboardingViewModel');

    authState.when(
      initial: () {
        setState(state?.copyWith(showAuthenticatedView: false));
      },
      loading: () {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ loading –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      },
      authenticated: (user) {
        setState(state?.copyWith(
          showAuthenticatedView: true,
          isSigningInAsGuest: false,
        ),);
        AppLogger.debug('User authenticated: ${user.id}');
      },
      unauthenticated: (failure) {
        setState(state?.copyWith(
          showAuthenticatedView: false,
          isSigningInAsGuest: false,
        ),);
        if (failure != null) {
          setError(failure.toMessage());
        }
      },
    );
  }

  /// Enter guest mode
  Future<void> signInAsGuest() async {
    if (state?.isSigningInAsGuest == true) return;

    AppLogger.debug('Guest sign in requested');

    setState(state?.copyWith(isSigningInAsGuest: true));
    clearError();

    try {
      final signInAsGuest = _ref.read(signInAsGuestActionProvider);
      await signInAsGuest();
    } catch (e, stackTrace) {
      AppLogger.error('Guest sign in failed', e, stackTrace);
      setError('Failed to sign in as guest: $e');
    } finally {
      setState(state?.copyWith(isSigningInAsGuest: false));
    }
  }

  /// Quit from system
  Future<void> signOut() async {
    AppLogger.debug('Sign out requested from OnboardingViewModel');

    await executeWithLoading(() async {
      final signOut = _ref.read(signOutActionProvider);
      await signOut();
    });
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –≤—Ö–æ–¥–∞
  void navigateToLogin() {
    AppLogger.debug('Navigation to login requested');
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ UI
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  void navigateToRegister() {
    AppLogger.debug('Navigation to register requested');
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ UI
  }

  /// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  void navigateToApp() {
    AppLogger.debug('Navigation to app requested');
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ UI
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String getWelcomeMessage(UserEntity? user) {
    if (user == null) return 'Welcome!';

    if (user.isGuest) {
      return 'Welcome, Guest! üëã';
    } else {
      return 'Welcome, ${user.displayName}! üëã';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç–µ–º
  bool get isGuestUser {
    final currentUser = _ref.read(currentUserProvider);
    return currentUser?.isGuest ?? false;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  UserEntity? get currentUser => _ref.read(currentUserProvider);

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  bool get isAuthenticated {
    return _ref.read(isAuthenticatedProvider);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  bool get isAuthLoading {
    return _ref.read(isAuthLoadingProvider);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ loading
  bool get isOverallLoading {
    return isLoading || isAuthLoading || (state?.isProcessing ?? false);
  }
}
