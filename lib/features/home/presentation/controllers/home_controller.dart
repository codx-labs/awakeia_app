import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

import '../../../../shared/base/base_state_notifier.dart';
import '../../../auth/domain/entities/user_entity.dart';
import '../../../auth/presentation/providers/auth_providers.dart';

part 'home_controller.freezed.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
@freezed
abstract class HomeState with _$HomeState {
  const factory HomeState({
    @Default(0) int selectedTabIndex,
    @Default(0) int todayCompletedHabits,
    @Default(0) int totalHabitsToday,
    @Default(0) int currentStreak,
    @Default(false) bool hasHabits,
    @Default(false) bool isLoading,
    String? error,
    @Default(false) bool isRefreshing,
  }) = _HomeState;

  const HomeState._();

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
  String get completedHabitsText => '$todayCompletedHabits/$totalHabitsToday';

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
  bool get hasTodayHabits => totalHabitsToday > 0;

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  double get completionPercentage {
    if (totalHabitsToday == 0) return 0.0;
    return todayCompletedHabits / totalHabitsToday;
  }
}

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (–∑–∞–º–µ–Ω–∞ HomeViewModel)
class HomeController extends BaseStateNotifier<HomeState> {
  @override
  HomeState build() {
    logAction('Initializing HomeController');

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    _setupAuthListener();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    Future.microtask(() => _loadInitialData());

    return const HomeState();
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void _setupAuthListener() {
    ref.listen(currentUserProvider, (previous, next) {
      _onUserChanged(next);
    });
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void _onUserChanged(UserEntity? user) {
    logAction('User changed: ${user?.id}');

    if (user == null) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      state = const HomeState();
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
      _loadUserData(user);
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> _loadInitialData() async {
    final currentUser = ref.read(currentUserProvider);
    if (currentUser != null) {
      await _loadUserData(currentUser);
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadUserData(UserEntity user) async {
    logAction('Loading data for user: ${user.id}');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ refresh
    if (!state.isRefreshing) {
      state = state.copyWith(isLoading: true, error: null);
    }

    try {
      // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
      await Future<void>.delayed(const Duration(milliseconds: 500));

      state = state.copyWith(
        todayCompletedHabits: 0,
        totalHabitsToday: 0,
        currentStreak: 0,
        hasHabits: false,
        isLoading: false,
        isRefreshing: false,
        error: null,
      );

      logAction('User data loaded successfully');
    } catch (e, stackTrace) {
      logError('Failed to load user data', e, stackTrace);
      state = state.copyWith(
        isLoading: false,
        isRefreshing: false,
        error: 'Failed to load data: ${e.toString()}',
      );
    }
  }

  /// –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  void changeTab(int index) {
    if (index < 0 || index > 3) {
      logError('Invalid tab index: $index');
      return;
    }

    logAction('Changing tab to index: $index');

    if (state.selectedTabIndex != index) {
      state = state.copyWith(selectedTabIndex: index);
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞
  Future<void> refresh() async {
    logAction('Refreshing home screen data');

    state = state.copyWith(isRefreshing: true, error: null);

    final currentUser = ref.read(currentUserProvider);
    if (currentUser != null) {
      await _loadUserData(currentUser);
    } else {
      state = state.copyWith(isRefreshing: false);
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
  Future<void> createNewHabit() async {
    logAction('Creating new habit requested');

    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    state = state.copyWith(
      error: 'Creating habits will be added in next versions',
    );

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    Future.delayed(const Duration(seconds: 3), () {
      if (state.error == 'Creating habits will be added in next versions') {
        clearError();
      }
    });
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  Future<void> markHabitCompleted(String habitId) async {
    logAction('Marking habit as completed: $habitId');

    state = state.copyWith(isLoading: true, error: null);

    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏
      await Future<void>.delayed(const Duration(milliseconds: 200));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      state = state.copyWith(
        todayCompletedHabits: state.todayCompletedHabits + 1,
        isLoading: false,
      );
    } catch (e, stackTrace) {
      logError('Failed to mark habit as completed', e, stackTrace);
      state = state.copyWith(
        isLoading: false,
        error: 'Failed to update habit',
      );
    }
  }

  /// –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> signOut() async {
    logAction('Sign out requested');

    state = state.copyWith(isLoading: true, error: null);

    try {
      final signOut = ref.read(signOutActionProvider);
      await signOut();
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ —á–µ—Ä–µ–∑ _onUserChanged
    } catch (e, stackTrace) {
      logError('Sign out failed', e, stackTrace);
      state = state.copyWith(
        isLoading: false,
        error: 'Failed to sign out',
      );
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
  void clearError() {
    if (state.error != null) {
      state = state.copyWith(error: null);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String getWelcomeMessage(UserEntity? user) {
    if (user == null) return 'Welcome!';

    if (user.isGuest) {
      return 'Welcome, Guest! üëã';
    } else {
      return 'Welcome, ${user.displayName}! üëã';
    }
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è HomeController
final homeControllerProvider =
    AutoDisposeNotifierProvider<HomeController, HomeState>(
  HomeController.new,
);

// Convenience providers

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
final homeLoadingProvider = Provider.autoDispose<bool>((ref) {
  return ref.watch(homeControllerProvider).isLoading;
});

/// –û—à–∏–±–∫–∞
final homeErrorProvider = Provider.autoDispose<String?>((ref) {
  return ref.watch(homeControllerProvider).error;
});

/// –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏
final selectedTabIndexProvider = Provider.autoDispose<int>((ref) {
  return ref.watch(homeControllerProvider).selectedTabIndex;
});

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
final habitsStatsProvider = Provider.autoDispose<
    ({
      int completed,
      int total,
      int streak,
    })>((ref) {
  final state = ref.watch(homeControllerProvider);
  return (
    completed: state.todayCompletedHabits,
    total: state.totalHabitsToday,
    streak: state.currentStreak,
  );
});

/// –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏
final hasHabitsProvider = Provider.autoDispose<bool>((ref) {
  return ref.watch(homeControllerProvider).hasHabits;
});

/// –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
final hasTodayHabitsProvider = Provider.autoDispose<bool>((ref) {
  return ref.watch(homeControllerProvider).hasTodayHabits;
});

/// –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
final completionPercentageProvider = Provider.autoDispose<double>((ref) {
  return ref.watch(homeControllerProvider).completionPercentage;
});

/// –¢–µ–∫—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
final completedHabitsTextProvider = Provider.autoDispose<String>((ref) {
  return ref.watch(homeControllerProvider).completedHabitsText;
});

/// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
final welcomeMessageProvider = Provider.autoDispose<String>((ref) {
  final controller = ref.watch(homeControllerProvider.notifier);
  final user = ref.watch(currentUserProvider);
  return controller.getWelcomeMessage(user);
});
