import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../core/logging/app_logger.dart';
import '../../../../shared/base/base_view_model.dart';
import '../../../auth/domain/entities/user_entity.dart';
import '../../../auth/presentation/providers/auth_providers.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
class HomeState {
  const HomeState({
    this.selectedTabIndex = 0,
    this.todayCompletedHabits = 0,
    this.totalHabitsToday = 0,
    this.currentStreak = 0,
    this.hasHabits = false,
  });

  final int selectedTabIndex;
  final int todayCompletedHabits;
  final int totalHabitsToday;
  final int currentStreak;
  final bool hasHabits;

  HomeState copyWith({
    int? selectedTabIndex,
    int? todayCompletedHabits,
    int? totalHabitsToday,
    int? currentStreak,
    bool? hasHabits,
  }) {
    return HomeState(
      selectedTabIndex: selectedTabIndex ?? this.selectedTabIndex,
      todayCompletedHabits: todayCompletedHabits ?? this.todayCompletedHabits,
      totalHabitsToday: totalHabitsToday ?? this.totalHabitsToday,
      currentStreak: currentStreak ?? this.currentStreak,
      hasHabits: hasHabits ?? this.hasHabits,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
  String get completedHabitsText => '$todayCompletedHabits/$totalHabitsToday';

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
  bool get hasTodayHabits => totalHabitsToday > 0;

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  double get completionPercentage {
    if (totalHabitsToday == 0) return 0.0;
    return todayCompletedHabits / totalHabitsToday;
  }
}

/// View Model –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class HomeViewModel extends BaseViewModelWithState<HomeState> {
  HomeViewModel(this._ref) {
    _init();
  }

  final Ref _ref;

  @override
  void dispose() {
    AppLogger.debug('HomeViewModel disposed');
    super.dispose();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è view model
  void _init() {
    AppLogger.debug('HomeViewModel initialized');
    setState(const HomeState());

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    _ref.listen(currentUserProvider, (previous, next) {
      _onUserChanged(next);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    _loadInitialData();
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void _onUserChanged(UserEntity? user) {
    AppLogger.debug('User changed in HomeViewModel: ${user?.id}');
    if (user == null) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setState(const HomeState());
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
      _loadUserData(user);
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> _loadInitialData() async {
    await executeWithLoading(() async {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final currentUser = _ref.read(currentUserProvider);
      if (currentUser != null) {
        await _loadUserData(currentUser);
      }
    });
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadUserData(UserEntity user) async {
    AppLogger.debug('Loading data for user: ${user.id}');

    try {
      // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
      await Future<dynamic>.delayed(const Duration(milliseconds: 500));

      setState(state?.copyWith(
        todayCompletedHabits: 0,
        totalHabitsToday: 0,
        currentStreak: 0,
        hasHabits: false,
      ),);

      AppLogger.debug('User data loaded successfully');
    } catch (e, stackTrace) {
      AppLogger.error('Failed to load user data', e, stackTrace);
      setError('Failed to load user data: $e');
    }
  }

  /// –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ bottom navigation
  void changeTab(int index) {
    AppLogger.debug('Changing tab to index: $index');

    if (state?.selectedTabIndex != index) {
      setState(state?.copyWith(selectedTabIndex: index));
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞
  Future<void> refresh() async {
    AppLogger.debug('Refreshing home screen data');

    await executeWithLoading(() async {
      final currentUser = _ref.read(currentUserProvider);
      if (currentUser != null) {
        await _loadUserData(currentUser);
      }
    });
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
  Future<void> createNewHabit() async {
    AppLogger.debug('Creating new habit requested');

    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    setError('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    Future.delayed(const Duration(seconds: 3), () {
      clearError();
    });
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  Future<void> markHabitCompleted(String habitId) async {
    AppLogger.debug('Marking habit as completed: $habitId');

    await executeWithLoading(() async {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏
      await Future<dynamic>.delayed(const Duration(milliseconds: 200));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      final currentState = state;
      if (currentState != null) {
        setState(currentState.copyWith(
          todayCompletedHabits: currentState.todayCompletedHabits + 1,
        ),);
      }
    });
  }

  /// –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> signOut() async {
    AppLogger.debug('Sign out requested from HomeViewModel');

    await executeWithLoading(() async {
      final signOut = _ref.read(signOutActionProvider);
      await signOut();
    }, showError: true,);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String getWelcomeMessage(UserEntity? user) {
    if (user == null) return 'Welcome!';

    if (user.isGuest) {
      return 'Welcome, Guest! üëã';
    } else {
      return 'Welcome, ${user.displayName}! üëã';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Å—Ç–µ–º
  bool get isGuestUser {
    final currentUser = _ref.read(currentUserProvider);
    return currentUser?.isGuest ?? false;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  UserEntity? get currentUser => _ref.read(currentUserProvider);
}
